<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_2.dtd'>
<nta>
	<declaration>const int NODES = 3;
const int EDGES = 6;

int chanMsgVar[EDGES];
chan chanMsgCh[EDGES];

bool nodeCrash[NODES];


//-------------------Dialgo Code---------------------

int getReceiveIndex(int pidA, int pidB){
    int in = 0;
    if (pidA &gt; pidB) {
		in = pidA - 1;
	} else {
		in = pidA;
	}
	return ((NODES - 1) * pidB) + in;
}

int getSendIndex(int pidA, int pidB){
    int in = 0;
    if (pidB &gt; pidA) {
		in = pidB - 1;
	} else {
		in = pidB;
	}
	return ((NODES - 1) * pidA) + in;
}
</declaration>
	<template>
		<name x="5" y="5">Sender</name>
		<parameter>const int pid</parameter>
		<declaration>int i = 0;</declaration>
		<location id="id0" x="0" y="0">
			<name x="17" y="-17">ForLoop0Head</name>
			<label kind="invariant" x="-10" y="17">i &lt;= 10</label>
		</location>
		<location id="id1" x="0" y="-68">
			<name x="17" y="-85">RandomBool0</name>
		</location>
		<location id="id2" x="34" y="-127">
			<name x="51" y="-144">True</name>
		</location>
		<location id="id3" x="-34" y="-127">
			<name x="-85" y="-144">False</name>
		</location>
		<location id="id4" x="34" y="-221">
			<name x="51" y="-238">Send0</name>
		</location>
		<location id="id5" x="0" y="-255">
			<name x="15" y="-272">ForLoop0End</name>
		</location>
		<location id="id6" x="-153" y="0">
			<name x="-163" y="-34">End</name>
		</location>
		<init ref="id0"/>
		<transition>
			<source ref="id0"/>
			<target ref="id6"/>
			<label kind="guard" x="-93" y="-34">i &gt;= 10</label>
		</transition>
		<transition>
			<source ref="id5"/>
			<target ref="id0"/>
			<label kind="assignment" x="68" y="-314">i++</label>
			<nail x="0" y="-289"/>
			<nail x="280" y="-289"/>
			<nail x="280" y="0"/>
		</transition>
		<transition>
			<source ref="id4"/>
			<target ref="id5"/>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id5"/>
			<nail x="-34" y="-212"/>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id4"/>
			<label kind="select" x="42" y="-204">x : int[0,1]</label>
			<label kind="synchronisation" x="42" y="-187">chanMsgCh[getSendIndex(pid,x)]!</label>
			<label kind="assignment" x="42" y="-170">chanMsgVar[getSendIndex(pid,x)] = i</label>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id3"/>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id2"/>
		</transition>
		<transition>
			<source ref="id0"/>
			<target ref="id1"/>
			<label kind="guard" x="8" y="-42">i &lt; 10</label>
		</transition>
	</template>
	<template>
		<name>NodeCrasher</name>
		<location id="id7" x="0" y="0">
			<name x="-8" y="17">Idle</name>
		</location>
		<location id="id8" x="76" y="-93">
			<name x="66" y="-127">TurnOff</name>
		</location>
		<location id="id9" x="-76" y="-93">
			<name x="-86" y="-127">TurnOn</name>
		</location>
		<init ref="id7"/>
		<transition>
			<source ref="id8"/>
			<target ref="id7"/>
			<nail x="34" y="-93"/>
		</transition>
		<transition>
			<source ref="id9"/>
			<target ref="id7"/>
			<nail x="-34" y="-93"/>
		</transition>
		<transition>
			<source ref="id7"/>
			<target ref="id9"/>
			<label kind="select" x="-161" y="-59">i:int[0,NODES-1]</label>
			<label kind="assignment" x="-153" y="-42">nodeCrash[i] = false</label>
		</transition>
		<transition>
			<source ref="id7"/>
			<target ref="id8"/>
			<label kind="select" x="59" y="-59">i:int[0,NODES-1]</label>
			<label kind="assignment" x="34" y="-42">nodeCrash[i] = true</label>
		</transition>
	</template>
	<template>
		<name>Receiver</name>
		<parameter>const int pid</parameter>
		<declaration>int i;</declaration>
		<location id="id10" x="0" y="0">
			<name x="-110" y="-17">ForLoop0Head</name>
		</location>
		<location id="id11" x="0" y="-102">
			<name x="-102" y="-119">ForLoop0End</name>
		</location>
		<init ref="id10"/>
		<transition>
			<source ref="id11"/>
			<target ref="id10"/>
			<label kind="guard" x="17" y="-119">nodeCrash[pid] == false</label>
			<nail x="68" y="-102"/>
			<nail x="68" y="0"/>
		</transition>
		<transition>
			<source ref="id10"/>
			<target ref="id11"/>
			<label kind="guard" x="-161" y="-85">nodeCrash[pid] == false</label>
			<label kind="synchronisation" x="-238" y="-68">chanMsgCh[getReceiveIndex(pid,2)]?</label>
			<label kind="assignment" x="-263" y="-51">i = chanMsgVar[getReceiveIndex(pid,2)]</label>
		</transition>
	</template>
	<system>receiver0 = Receiver(0);
receiver1 = Receiver(1);
sender = Sender(2);

system receiver0, receiver1, sender, NodeCrasher;
    </system>
	<queries>
		<query>
			<formula>A[] deadlock imply sender.End</formula>
			<comment></comment>
		</query>
	</queries>
</nta>
