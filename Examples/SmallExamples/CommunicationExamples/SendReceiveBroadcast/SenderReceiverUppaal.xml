<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_2.dtd'>
<nta>
	<declaration>const int NODES = 4;
const int EDGES = 12;


int chanMsgVar[EDGES];
chan chanMsgChan[NODES];


//-------------------Dialgo Code---------------------

int getReceiveIndex(int pidA, int pidB){
    int in = 0;
    if (pidA &gt; pidB) {
		in = pidA - 1;
	} else {
		in = pidA;
	}
	return ((NODES - 1) * pidB) + in;
}

int getSendIndex(int pidA, int pidB){
    int in = 0;
    if (pidB &gt; pidA) {
		in = pidB - 1;
	} else {
		in = pidB;
	}
	return ((NODES - 1) * pidA) + in;
}
</declaration>
	<template>
		<name x="5" y="5">Sender</name>
		<parameter>const int pid</parameter>
		<location id="id0" x="8" y="-68">
			<name x="25" y="-85">Start</name>
		</location>
		<location id="id1" x="8" y="-170">
			<name x="25" y="-178">Broadcast</name>
		</location>
		<location id="id2" x="8" y="-246">
			<name x="25" y="-255">pid0</name>
		</location>
		<location id="id3" x="8" y="-323">
			<name x="25" y="-340">pid1</name>
		</location>
		<location id="id4" x="8" y="-399">
			<name x="25" y="-425">pid2</name>
		</location>
		<location id="id5" x="8" y="-484">
			<name x="-2" y="-518">End</name>
		</location>
		<init ref="id0"/>
		<transition>
			<source ref="id4"/>
			<target ref="id5"/>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id4"/>
			<label kind="synchronisation" x="17" y="-382">chanMsgChan[2]!</label>
			<label kind="assignment" x="17" y="-365">chanMsgVar[getSendIndex(pid,2)] = 42</label>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id3"/>
			<label kind="synchronisation" x="17" y="-306">chanMsgChan[1]!</label>
			<label kind="assignment" x="17" y="-289">chanMsgVar[getSendIndex(pid,1)] = 42</label>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id2"/>
			<label kind="synchronisation" x="17" y="-229">chanMsgChan[0]!</label>
			<label kind="assignment" x="17" y="-212">chanMsgVar[getSendIndex(pid,0)] = 42</label>
		</transition>
		<transition>
			<source ref="id0"/>
			<target ref="id1"/>
		</transition>
	</template>
	<template>
		<name>Receiver</name>
		<parameter>const int pid</parameter>
		<declaration>int msg;</declaration>
		<location id="id6" x="0" y="17">
			<name x="-51" y="0">Start</name>
		</location>
		<location id="id7" x="0" y="-187">
			<name x="-34" y="-221">End</name>
		</location>
		<location id="id8" x="0" y="-93">
			<name x="-51" y="-119">Msg0</name>
		</location>
		<init ref="id6"/>
		<transition>
			<source ref="id8"/>
			<target ref="id7"/>
		</transition>
		<transition>
			<source ref="id6"/>
			<target ref="id8"/>
			<label kind="synchronisation" x="8" y="-59">chanMsgChan[pid]?</label>
			<label kind="assignment" x="8" y="-42">msg = chanMsgVar[getReceiveIndex(pid,3)]</label>
		</transition>
	</template>
	<system>receiver0 = Receiver(0);
receiver1 = Receiver(1);
receiver2 = Receiver(2);
sender = Sender(3);

system receiver0, receiver1, receiver2, sender;
    </system>
	<queries>
		<query>
			<formula>A[] deadlock imply sender.End &amp;&amp; receiver0.End &amp;&amp; receiver1.End &amp;&amp; receiver2.End</formula>
			<comment></comment>
		</query>
	</queries>
</nta>
