<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_2.dtd'>
<nta>
	<declaration>// global consts
const int NODES = 3;
const int EDGES = 6;

const int YES = 1;
const int NO = 0;
const int NO_ANSWER = -1;

// global var.
int timestamp = 0;

// structs
typedef struct {
  int id, timestamp;
} Info;

// chan var.
int chanRequestBuffer = 1;
int chanResponseBuffer = 1;

bool chanRequestSize[EDGES] = {false,false,false,false,false,false};
bool chanResponseSize[EDGES] = {false,false,false,false,false,false};

Info chanRequest[EDGES][1];
bool chanResponse[EDGES][1];</declaration>
	<template>
		<name x="5" y="5">Node</name>
		<parameter>const int pid, int &amp;receiving[2], int &amp;sending[2]</parameter>
		<declaration>// local var.
bool inCS = false;
bool toldWantInCS = false;
bool wantInCS = false;
int wantInCsTimestamp = -1;
int responseOnCsRequest[NODES-1];
int responseOnCsCount = 0;

// other var.
int i = 0; // i from main for loop



// Code from called funcs
// checks if another process can enter the cs
bool nextPidForCS(int pid, bool wantInCS, int wantInCsTimestamp, Info msg, bool inCS) {
	if(inCS) {
		return false;
	}

	if(!wantInCS || (wantInCS &amp;&amp; wantInCsTimestamp &gt; msg.timestamp) || (wantInCS &amp;&amp; wantInCsTimestamp == msg.timestamp &amp;&amp; pid &gt; msg.id)) {
		return true;
	} else {
		return false;
	}
}

// code in node func
void forLoop0(){
    int i;
    for (i = 0; i &lt; NODES - 1; i++) {
		responseOnCsRequest[i] = NO_ANSWER;
	}
}

void update0(){
    Info info = {pid, wantInCsTimestamp};
    chanRequest[sending[0]][0] = info;
    chanRequestSize[sending[0]] = true;
    chanRequest[sending[1]][0] = info;
    chanRequestSize[sending[1]] = true;
    toldWantInCS = true;
}

void update1(bool msg){
    responseOnCsCount++;
    if (msg == true) {
		responseOnCsRequest[0] = YES;
	} else {
		responseOnCsRequest[0] = NO;
	}
}

void update2(bool msg){
    responseOnCsCount++;
    if (msg == true) {
		responseOnCsRequest[1] = YES;
	} else {
		responseOnCsRequest[1] = NO;
	}
}

void update3(){
    // enter or not

    bool enterCS = true;
    
    int i;
    for(i = 0; i &lt; NODES - 1; i++){
        if (responseOnCsRequest[i] == NO || responseOnCsRequest[i] == NO_ANSWER) {
		    enterCS = false;
		}
    } 

    if (enterCS) {
		inCS = true;
		wantInCS = false;
		//fmt.Println("PID ", pid, " entering CS")
	}

    // Reset vars

    responseOnCsCount = 0;

    for (i = 0; i &lt; NODES - 1; i++) {
		responseOnCsRequest[i] = NO_ANSWER;
	}

	toldWantInCS = false;
}</declaration>
		<location id="id0" x="0" y="0">
		</location>
		<location id="id1" x="0" y="-59">
			<name x="17" y="-68">ForLoop0</name>
		</location>
		<location id="id2" x="0" y="-136">
			<name x="17" y="-144">ForLoop1Begin</name>
			<label kind="invariant" x="17" y="-161">i &lt;= 100</label>
		</location>
		<location id="id3" x="-255" y="-136">
			<name x="-297" y="-127">ForLoop1End</name>
		</location>
		<location id="id4" x="51" y="-229">
			<name x="68" y="-237">if0</name>
		</location>
		<location id="id5" x="-42" y="-229">
		</location>
		<location id="id6" x="51" y="-306">
			<name x="68" y="-314">if1</name>
		</location>
		<location id="id7" x="51" y="-382">
		</location>
		<location id="id8" x="0" y="-467">
		</location>
		<location id="id9" x="0" y="-561">
			<name x="17" y="-569">if2</name>
		</location>
		<location id="id10" x="68" y="-637">
		</location>
		<location id="id11" x="-68" y="-637">
		</location>
		<location id="id12" x="0" y="-714">
			<name x="17" y="-722">if3</name>
		</location>
		<location id="id13" x="68" y="-790">
		</location>
		<location id="id14" x="-68" y="-790">
		</location>
		<location id="id15" x="0" y="-867">
			<name x="17" y="-875">select1</name>
		</location>
		<location id="id16" x="68" y="-943">
		</location>
		<location id="id17" x="-68" y="-943">
		</location>
		<location id="id18" x="68" y="-1028">
		</location>
		<location id="id19" x="8" y="-1079">
			<name x="25" y="-1088">select2</name>
		</location>
		<location id="id20" x="76" y="-1147">
		</location>
		<location id="id21" x="-68" y="-1147">
		</location>
		<location id="id22" x="76" y="-1224">
		</location>
		<location id="id23" x="8" y="-1275">
			<name x="25" y="-1283">if4</name>
		</location>
		<location id="id24" x="76" y="-1343">
		</location>
		<location id="id25" x="-68" y="-1343">
		</location>
		<location id="id26" x="76" y="-1436">
		</location>
		<location id="id27" x="8" y="-1487">
		</location>
		<location id="id28" x="76" y="-1555">
		</location>
		<location id="id29" x="-68" y="-1555">
		</location>
		<location id="id30" x="136" y="-1632">
		</location>
		<location id="id31" x="17" y="-1632">
		</location>
		<location id="id32" x="136" y="-1717">
		</location>
		<location id="id33" x="76" y="-1759">
		</location>
		<location id="id34" x="136" y="-1827">
		</location>
		<location id="id35" x="17" y="-1827">
		</location>
		<location id="id36" x="136" y="-1904">
		</location>
		<location id="id37" x="76" y="-1946">
			<name x="93" y="-1963">if5</name>
		</location>
		<location id="id38" x="136" y="-2006">
		</location>
		<location id="id39" x="25" y="-2006">
		</location>
		<location id="id40" x="136" y="-2091">
		</location>
		<location id="id41" x="85" y="-2133">
		</location>
		<init ref="id0"/>
		<transition>
			<source ref="id3"/>
			<target ref="id3"/>
			<nail x="-255" y="-187"/>
			<nail x="-289" y="-187"/>
		</transition>
		<transition>
			<source ref="id41"/>
			<target ref="id2"/>
			<label kind="assignment" x="297" y="-2159">i++</label>
			<nail x="816" y="-2133"/>
			<nail x="816" y="-255"/>
		</transition>
		<transition>
			<source ref="id39"/>
			<target ref="id41"/>
			<nail x="25" y="-2099"/>
		</transition>
		<transition>
			<source ref="id40"/>
			<target ref="id41"/>
			<nail x="127" y="-2099"/>
		</transition>
		<transition>
			<source ref="id38"/>
			<target ref="id40"/>
			<label kind="assignment" x="144" y="-2065">update3()</label>
		</transition>
		<transition>
			<source ref="id37"/>
			<target ref="id39"/>
			<label kind="guard" x="-170" y="-1980">responseOnCsCount != NODES-1</label>
		</transition>
		<transition>
			<source ref="id37"/>
			<target ref="id38"/>
			<label kind="guard" x="110" y="-1980">responseOnCsCount == NODES-1</label>
		</transition>
		<transition>
			<source ref="id35"/>
			<target ref="id37"/>
			<nail x="17" y="-1912"/>
		</transition>
		<transition>
			<source ref="id36"/>
			<target ref="id37"/>
		</transition>
		<transition>
			<source ref="id34"/>
			<target ref="id36"/>
			<label kind="assignment" x="144" y="-1878">update2(chanResponse[receiving[1]][0])</label>
		</transition>
		<transition>
			<source ref="id33"/>
			<target ref="id35"/>
			<label kind="guard" x="-229" y="-1810">chanResponseSize[receiving[1]] == false</label>
		</transition>
		<transition>
			<source ref="id33"/>
			<target ref="id34"/>
			<label kind="guard" x="119" y="-1810">chanResponseSize[receiving[1]] == true</label>
			<label kind="assignment" x="106" y="-1793">chanResponseSize[receiving[1]] = false</label>
		</transition>
		<transition>
			<source ref="id31"/>
			<target ref="id33"/>
			<nail x="17" y="-1725"/>
		</transition>
		<transition>
			<source ref="id32"/>
			<target ref="id33"/>
		</transition>
		<transition>
			<source ref="id30"/>
			<target ref="id32"/>
			<label kind="assignment" x="144" y="-1683">update1(chanResponse[receiving[0]][0])</label>
		</transition>
		<transition>
			<source ref="id28"/>
			<target ref="id31"/>
			<label kind="guard" x="-221" y="-1606">chanResponseSize[receiving[0]] == false</label>
		</transition>
		<transition>
			<source ref="id28"/>
			<target ref="id30"/>
			<label kind="guard" x="119" y="-1606">chanResponseSize[receiving[0]] == true</label>
			<label kind="assignment" x="106" y="-1593">chanResponseSize[receiving[0]] = false</label>
		</transition>
		<transition>
			<source ref="id29"/>
			<target ref="id2"/>
			<label kind="assignment" x="-153" y="-1581">i++</label>
			<nail x="-280" y="-1555"/>
			<nail x="-280" y="-255"/>
		</transition>
		<transition>
			<source ref="id27"/>
			<target ref="id29"/>
			<label kind="guard" x="-238" y="-1538">(!wantInCS &amp;&amp; !toldWantInCS)
|| (wantInCS &amp;&amp; !toldWantInCS)
|| (!wantInCS &amp;&amp; toldWantInCS)</label>
		</transition>
		<transition>
			<source ref="id27"/>
			<target ref="id28"/>
			<label kind="guard" x="51" y="-1530">wantInCS &amp;&amp; toldWantInCS</label>
		</transition>
		<transition>
			<source ref="id25"/>
			<target ref="id27"/>
			<nail x="-68" y="-1445"/>
		</transition>
		<transition>
			<source ref="id26"/>
			<target ref="id27"/>
		</transition>
		<transition>
			<source ref="id24"/>
			<target ref="id26"/>
			<label kind="assignment" x="85" y="-1402">update0()</label>
		</transition>
		<transition>
			<source ref="id23"/>
			<target ref="id25"/>
			<label kind="guard" x="-238" y="-1317">(!wantInCS &amp;&amp; toldWantInCS) 
|| (!wantInCS &amp;&amp; !toldWantInCS)
|| (wantInCS &amp;&amp; toldWantInCS)</label>
		</transition>
		<transition>
			<source ref="id23"/>
			<target ref="id24"/>
			<label kind="guard" x="51" y="-1317">wantInCS &amp;&amp; !toldWantInCS</label>
		</transition>
		<transition>
			<source ref="id21"/>
			<target ref="id23"/>
			<nail x="-68" y="-1232"/>
		</transition>
		<transition>
			<source ref="id22"/>
			<target ref="id23"/>
		</transition>
		<transition>
			<source ref="id20"/>
			<target ref="id22"/>
			<label kind="assignment" x="85" y="-1207">chanResponse[sending[1]][0] = nextPidForCS(pid, wantInCS, wantInCsTimestamp, chanRequest[receiving[1]][0], inCS),
chanResponseSize[sending[1]] = true</label>
		</transition>
		<transition>
			<source ref="id19"/>
			<target ref="id21"/>
			<label kind="guard" x="-280" y="-1122">chanRequestSize[receiving[1]] == false</label>
		</transition>
		<transition>
			<source ref="id19"/>
			<target ref="id20"/>
			<label kind="guard" x="59" y="-1130">chanRequestSize[receiving[1]] == true</label>
			<label kind="assignment" x="34" y="-1113">chanRequestSize[receiving[1]] = false</label>
		</transition>
		<transition>
			<source ref="id17"/>
			<target ref="id19"/>
			<nail x="-68" y="-1028"/>
		</transition>
		<transition>
			<source ref="id18"/>
			<target ref="id19"/>
		</transition>
		<transition>
			<source ref="id16"/>
			<target ref="id18"/>
			<label kind="assignment" x="76" y="-1003">chanResponse[sending[0]][0] = nextPidForCS(pid, wantInCS, wantInCsTimestamp, chanRequest[receiving[0]][0], inCS),
chanResponseSize[sending[0]]= true</label>
		</transition>
		<transition>
			<source ref="id15"/>
			<target ref="id17"/>
			<label kind="guard" x="-280" y="-909">chanRequestSize[receiving[0]] == false</label>
		</transition>
		<transition>
			<source ref="id15"/>
			<target ref="id16"/>
			<label kind="guard" x="42" y="-918">chanRequestSize[receiving[0]] == true</label>
			<label kind="assignment" x="25" y="-901">chanRequestSize[receiving[0]] = false</label>
		</transition>
		<transition>
			<source ref="id13"/>
			<target ref="id15"/>
		</transition>
		<transition>
			<source ref="id14"/>
			<target ref="id15"/>
		</transition>
		<transition>
			<source ref="id12"/>
			<target ref="id13"/>
			<label kind="guard" x="42" y="-756">!inCS</label>
		</transition>
		<transition>
			<source ref="id12"/>
			<target ref="id14"/>
			<label kind="guard" x="-68" y="-756">inCS</label>
		</transition>
		<transition>
			<source ref="id10"/>
			<target ref="id12"/>
			<label kind="select" x="42" y="-697">i : int[0,1]</label>
			<label kind="assignment" x="51" y="-680">inCS = i</label>
		</transition>
		<transition>
			<source ref="id11"/>
			<target ref="id12"/>
		</transition>
		<transition>
			<source ref="id9"/>
			<target ref="id11"/>
			<label kind="guard" x="-76" y="-603">!inCS</label>
		</transition>
		<transition>
			<source ref="id9"/>
			<target ref="id10"/>
			<label kind="guard" x="42" y="-603">inCS</label>
		</transition>
		<transition>
			<source ref="id8"/>
			<target ref="id9"/>
		</transition>
		<transition>
			<source ref="id5"/>
			<target ref="id8"/>
			<nail x="-42" y="-467"/>
		</transition>
		<transition>
			<source ref="id7"/>
			<target ref="id8"/>
			<label kind="assignment" x="59" y="-450">wantInCsTimestamp = timestamp, 
timestamp++</label>
			<nail x="51" y="-467"/>
		</transition>
		<transition>
			<source ref="id6"/>
			<target ref="id8"/>
			<label kind="guard" x="-25" y="-357">!wantInCS</label>
			<nail x="0" y="-306"/>
			<nail x="0" y="-450"/>
		</transition>
		<transition>
			<source ref="id6"/>
			<target ref="id7"/>
			<label kind="guard" x="59" y="-357">wantInCS</label>
		</transition>
		<transition>
			<source ref="id4"/>
			<target ref="id6"/>
			<label kind="select" x="59" y="-280">i : int[0,1]</label>
			<label kind="assignment" x="59" y="-263">wantInCS = i</label>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id5"/>
			<label kind="guard" x="-110" y="-204">wantInCS &amp;&amp; i &lt; 100</label>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id4"/>
			<label kind="guard" x="34" y="-204">!wantInCS &amp;&amp; i &lt; 100</label>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id3"/>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id2"/>
		</transition>
		<transition>
			<source ref="id0"/>
			<target ref="id1"/>
			<label kind="assignment" x="8" y="-34">forLoop0()</label>
		</transition>
	</template>
	<system>// Place template instantiations here.
int receiving0[2] = {1,2};
int receiving1[2] = {0,5};
int receiving2[2] = {3,4};

int sending0[2] = {4,5};
int sending1[2] = {2,3};
int sending2[2] = {0,1};


Node0 = Node(0, receiving0, sending0);
Node1 = Node(1, receiving1, sending1);
Node2 = Node(2, receiving2, sending2);
system Node0, Node1, Node2;
    </system>
	<queries>
		<query>
			<formula>A[] not deadlock</formula>
			<comment></comment>
		</query>
		<query>
			<formula>E&lt;&gt; Node0.inCS</formula>
			<comment></comment>
		</query>
		<query>
			<formula>E&lt;&gt; Node0.inCS &amp;&amp; Node1.inCS</formula>
			<comment></comment>
		</query>
		<query>
			<formula>A[] Node0.inCS imply !Node1.inCS &amp;&amp; !Node2.inCS</formula>
			<comment></comment>
		</query>
		<query>
			<formula></formula>
			<comment></comment>
		</query>
	</queries>
</nta>
